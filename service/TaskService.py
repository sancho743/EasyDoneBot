import html

from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from service.KeyBoardService import get_subjects_keyboard, get_sections_keyboard, get_task_type_keyboard, \
    get_solution_format_keyboard, get_confirmation_keyboard
from service.DataBaseService import get_all_subjects, get_sections_for_subject, get_all_task_types

async def ask_for_task_subject(message: Message):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏."""
    await message.answer(
        "üìö –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –≤–∞–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å:",
        reply_markup=await get_subjects_keyboard(is_for_task=True)
    )

async def ask_for_task_sections(message: Message, subject_id: int):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ä–∞–∑–¥–µ–ª—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞."""
    # Here we might need a get_subject_by_id function to get the name
    await message.edit_text(
        f"üìñ –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª—ã –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞:",
        reply_markup=await get_sections_keyboard(subject_id=subject_id)
    )

async def ask_for_task_type(message: Message):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ç–∏–ø –∑–∞–¥–∞—á–∏."""
    await message.answer(
        "üîß –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–∞—à–µ–π –∑–∞–¥–∞—á–∏:",
        reply_markup=await get_task_type_keyboard()
    )

async def ask_for_solution_format(message: Message):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç —Ä–µ—à–µ–Ω–∏—è."""
    await message.answer(
        "üìÑ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ä–µ—à–µ–Ω–∏—è:",
        reply_markup=get_solution_format_keyboard()  # This one is static, no await needed
    )

async def ask_for_deadline(message: Message):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–µ–¥–ª–∞–π–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏."""
    await message.answer(
        "üìÑ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏/–∏–ª–∏ –≤—Ä–µ–º—è –∫ –∫–æ—Ç–æ—Ä–æ–º—É –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∑–∞–¥–∞—á–∞. –í—ã –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ —É—Å–ª–æ–≤–∏—è –≤ —Å–≤–æ–±–æ–¥–Ω–æ–º –≤–∏–¥–µ:"
    )

async def format_task_summary(data: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ –∑–∞–¥–∞—á–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –ø–æ–ª—É—á–∞—è –∏–º–µ–Ω–∞ –∏–∑ –ë–î."""

    # Fetch all subjects and task types once to create a mapping
    all_subjects = await get_all_subjects()
    subjects_map = {s['subject_id']: s['subject_name'] for s in all_subjects}

    all_task_types = await get_all_task_types()
    task_types_map = {t['task_type_id']: t['type_name'] for t in all_task_types}

    subject_id = data.get("subject_id")
    subject_name = subjects_map.get(subject_id, f"ID {subject_id}")

    section_id = data.get("section_id")  # –ü–æ–ª—É—á–∞–µ–º –æ–¥–∏–Ω ID
    sections_data = await get_sections_for_subject(subject_id)
    sections_map = {s['section_id']: s['section_name'] for s in sections_data}
    section_name = sections_map.get(section_id, f"ID {section_id}")  # –ù–∞—Ö–æ–¥–∏–º –æ–¥–Ω–æ –∏–º—è

    task_type_id = data.get("task_type_id")  # –ü–æ–ª—É—á–∞–µ–º –æ–¥–∏–Ω ID
    task_type_name = task_types_map.get(task_type_id, f"ID {task_type_id}")  # –ù–∞—Ö–æ–¥–∏–º –æ–¥–Ω–æ –∏–º—è

    solution_format_key = data.get("solution_format")
    solution_formats = {
        "answer_only": "–¢–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç",
        "full_solution": "–†–µ—à–µ–Ω–∏–µ —Å –ø–æ—è—Å–Ω–µ–Ω–∏–µ–º",
        "fix_mistakes": "–ò—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏"
    }
    solution_format_name = solution_formats.get(solution_format_key, "–ù–µ —É–∫–∞–∑–∞–Ω")

    file_count = len(data.get("file_ids", []))
    '''–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å <> –≤ —Ç–µ–∫—Å—Ç–∞—Ö'''
    deadline_text = html.escape(data.get('deadline', '–ù–µ —É–∫–∞–∑–∞–Ω'))
    description_text = html.escape(data.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è.'))
    summary = [
        "üîç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–µ—Ç–∞–ª–∏ –≤–∞—à–µ–π –∑–∞–¥–∞—á–∏:\n",
        f"<b>–ü—Ä–µ–¥–º–µ—Ç:</b> {subject_name}",
        f"<b>–†–∞–∑–¥–µ–ª—ã:</b> {section_name}",
        f"<b>–¢–∏–ø –∑–∞–¥–∞—á–∏:</b> {task_type_name}",
        f"<b>–§–æ—Ä–º–∞—Ç —Ä–µ—à–µ–Ω–∏—è:</b> {solution_format_name}",
        f"<b>–°—Ä–æ–∫:</b> {deadline_text}",
        "\n<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>",
        f"<blockquote>{description_text}</blockquote>",
        f"\n<b>–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤:</b> {file_count}"
    ]
    return "\n".join(summary)

async def ask_for_task_confirmation(message: Message, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–≤–æ–¥–∫—É –∑–∞–¥–∞—á–∏ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ."""
    data = await state.get_data()
    summary_text = await format_task_summary(data)  # Add await here
    await message.answer(
        text=summary_text,
        reply_markup=get_confirmation_keyboard(),
        parse_mode="HTML"
    )