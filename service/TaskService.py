from aiogram.fsm.context import FSMContext
from aiogram.types import Message

from service.KeyBoardService import get_subjects_keyboard, get_sections_keyboard, get_task_type_keyboard, \
    get_solution_format_keyboard, get_confirmation_keyboard
from utils.constants import SUBJECTS, SUBJECT_SECTIONS, TYPE_OF_TASK


async def ask_for_task_subject(message: Message, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏."""
    await message.answer(
        "üìö –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –≤–∞–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å:",
        reply_markup=get_subjects_keyboard(is_for_task=True)
    )

async def ask_for_task_sections(message: Message, state: FSMContext, subject_id: int):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ä–∞–∑–¥–µ–ª—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞."""
    subject_name = SUBJECTS.get(subject_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç")
    await message.edit_text(
        f"üìñ –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª—ã –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞ ¬´{subject_name}¬ª:",
        reply_markup=get_sections_keyboard(subject_id=subject_id)
    )

async def ask_for_task_type(message: Message, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ç–∏–ø –∑–∞–¥–∞—á–∏."""
    await message.answer(
        "üîß –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–∞—à–µ–π –∑–∞–¥–∞—á–∏:",
        reply_markup=get_task_type_keyboard()
    )

async def ask_for_solution_format(message: Message, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç —Ä–µ—à–µ–Ω–∏—è."""
    await message.answer(
        "üìÑ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ä–µ—à–µ–Ω–∏—è:",
        reply_markup=get_solution_format_keyboard()
    )


def format_task_summary(data: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ –∑–∞–¥–∞—á–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."""
    subject_id = data.get("subject_id")
    subject_name = SUBJECTS.get(subject_id, f"ID {subject_id}")

    section_ids = data.get("section_ids", [])
    section_names = [SUBJECT_SECTIONS.get(subject_id, {}).get(s_id, f"ID {s_id}") for s_id in section_ids]

    task_type_ids = data.get("task_type_ids", [])
    task_type_names = [TYPE_OF_TASK.get(t_id, f"ID {t_id}") for t_id in task_type_ids]

    solution_format_key = data.get("solution_format")
    solution_formats = {
        "answer_only": "–¢–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç",
        "full_solution": "–†–µ—à–µ–Ω–∏–µ —Å –ø–æ—è—Å–Ω–µ–Ω–∏–µ–º",
        "fix_mistakes": "–ò—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏"
    }
    solution_format_name = solution_formats.get(solution_format_key, "–ù–µ —É–∫–∞–∑–∞–Ω")

    file_count = len(data.get("file_ids", []))

    summary = [
        "üîç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–µ—Ç–∞–ª–∏ –≤–∞—à–µ–π –∑–∞–¥–∞—á–∏:\n",
        f"<b>–ü—Ä–µ–¥–º–µ—Ç:</b> {subject_name}",
        f"<b>–†–∞–∑–¥–µ–ª—ã:</b> {', '.join(section_names)}",
        f"<b>–¢–∏–ø –∑–∞–¥–∞—á–∏:</b> {', '.join(task_type_names)}",
        f"<b>–§–æ—Ä–º–∞—Ç —Ä–µ—à–µ–Ω–∏—è:</b> {solution_format_name}",
        "\n<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>",
        f"<blockquote>{data.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è.')}</blockquote>",
        f"\n<b>–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤:</b> {file_count}"
    ]
    return "\n".join(summary)


async def ask_for_task_confirmation(message: Message, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–≤–æ–¥–∫—É –∑–∞–¥–∞—á–∏ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ."""
    data = await state.get_data()
    summary_text = format_task_summary(data)
    await message.answer(
        text=summary_text,
        reply_markup=get_confirmation_keyboard(),
        parse_mode="HTML"
    )
