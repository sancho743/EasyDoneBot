from typing import Dict, Union, List

from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder

from service.KeyBoardService import get_sections_keyboard, get_task_type_keyboard, get_subjects_keyboard
from service.RegistrationService import contains_links
from utils.constants import SUBJECT_SECTIONS, SUBJECTS, TYPE_OF_TASK

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö (–ø–æ–∑–∂–µ –∑–∞–º–µ–Ω–∏–º –Ω–∞ –ë–î)
executor_data: Dict[int, Dict] = {}

# --- –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
async def ask_for_subjects(
        target: Union[Message, CallbackQuery],
        current_selected: List[int] = None
):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤"""
    message = target.message if isinstance(target, CallbackQuery) else target

    # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = get_subjects_keyboard(current_selected)

    try:
        if isinstance(target, CallbackQuery):
            await message.edit_text(
                "üìö –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç(—ã), –ø–æ –∫–æ—Ç–æ—Ä—ã–º —Ä–µ—à–∞–µ—Ç–µ –∑–∞–¥–∞—á–∏:",
                reply_markup=keyboard
            )
        else:
            await message.answer(
                "üìö –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç(—ã), –ø–æ –∫–æ—Ç–æ—Ä—ã–º —Ä–µ—à–∞–µ—Ç–µ –∑–∞–¥–∞—á–∏:",
                reply_markup=keyboard
            )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ ask_for_subjects: {e}")
        await message.answer(
            "üìö –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç(—ã), –ø–æ –∫–æ—Ç–æ—Ä—ã–º —Ä–µ—à–∞–µ—Ç–µ –∑–∞–¥–∞—á–∏:",
            reply_markup=keyboard
        )

async def ask_for_sections(
    message: Message,
    subject_id: int,  # –¢–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ–º ID –≤–º–µ—Å—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏—è
    selected_section_ids: List[int] = None
):
    """–ó–∞–ø—Ä–æ—Å —Ä–∞–∑–¥–µ–ª–æ–≤ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º ID"""
    if selected_section_ids is None:
        selected_section_ids = []

    try:
        subject_name = SUBJECTS.get(subject_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç")
        await message.answer(
            f"üìñ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª—ã –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞ {subject_name}:",
            reply_markup=get_sections_keyboard(subject_id, selected_section_ids)
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ä–∞–∑–¥–µ–ª–æ–≤: {e}")
        raise

async def update_subjects_keyboard(
        callback: CallbackQuery,
        selected_ids: List[int],
        message_text: str = "üìö –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç(—ã), –ø–æ –∫–æ—Ç–æ—Ä—ã–º —Ä–µ—à–∞–µ—Ç–µ –∑–∞–¥–∞—á–∏:"
) -> None:
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏ (—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ)
    """
    try:
        keyboard = get_subjects_keyboard(selected_ids)
        await callback.message.edit_text(
            text=message_text,
            reply_markup=keyboard
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {e}")
        # Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.answer(
            text=message_text,
            reply_markup=get_subjects_keyboard(selected_ids)
        )

# –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Ä–∞–∑–¥–µ–ª–æ–≤
async def update_sections_keyboard(
        callback: CallbackQuery,
        subject_id: int,
        selected_ids: List[int],
        message_text: str = None
) -> None:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–∞–∑–¥–µ–ª–∞–º–∏ –ø—Ä–µ–¥–º–µ—Ç–∞"""
    if message_text is None:
        subject_name = SUBJECTS[subject_id]
        message_text = f"üìñ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª—ã –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞ {subject_name}:"

    try:
        keyboard = get_sections_keyboard(subject_id, selected_ids)
        await callback.message.edit_text(
            text=message_text,
            reply_markup=keyboard
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Ä–∞–∑–¥–µ–ª–æ–≤: {e}")
        # Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.answer(
            text=message_text,
            reply_markup=get_sections_keyboard(subject_id, selected_ids)
        )

async def update_task_type_keyboard(callback: CallbackQuery, selected_ids: List[int]):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–∏–ø–∞–º–∏ –∑–∞–¥–∞—á"""
    try:
        keyboard = get_task_type_keyboard(selected_ids)
        await callback.message.edit_text(
            text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø—ã –∑–∞–¥–∞—á:",
            reply_markup=keyboard
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á: {e}")
        await callback.message.answer(
            text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø—ã –∑–∞–¥–∞—á:",
            reply_markup=get_task_type_keyboard(selected_ids)
        )

async def ask_for_task_type(message: Message, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á"""
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø—ã –∑–∞–¥–∞—á, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –≤—ã–ø–æ–ª–Ω—è–µ—Ç–µ:",
        reply_markup=get_task_type_keyboard()
    )

async def ask_for_description(message: Message):
    """–ó–∞–ø—Ä–æ—Å –æ–ø–∏—Å–∞–Ω–∏—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    await message.answer(
        "‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–±–µ–∑ —Å—Å—ã–ª–æ–∫!):\n"
        "–ü—Ä–∏–º–µ—Ä: ¬´–†–µ—à–∞—é –∑–∞–¥–∞—á–∏ –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ 1-2 –∫—É—Ä—Å–æ–≤¬ª"
    )
async def ask_for_experience(message: Message):
    """–ó–∞–ø—Ä–æ—Å –æ–ø—ã—Ç–∞ —Ä–∞–±–æ—Ç—ã"""
    await message.answer(
        "üìÜ –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã (–≤ –≥–æ–¥–∞—Ö –∏–ª–∏ ¬´–ù–µ—Ç –æ–ø—ã—Ç–∞¬ª):"
    )

async def ask_for_photo(message: Message):
    """–ó–∞–ø—Ä–æ—Å —Ñ–æ—Ç–æ"""
    await message.answer(
        "üì∑ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –≤–∞—à–µ —Ñ–æ—Ç–æ (—ç—Ç–æ –ø–æ–≤—ã—Å–∏—Ç –¥–æ–≤–µ—Ä–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤):"
    )

async def ask_for_education(message: Message):
    """–ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏"""
    await message.answer(
        "üéì –£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ(–Ω–∞–ø—Ä–∏–º–µ—Ä: "
        "\"–ú–ì–£, —Ñ–∞–∫—É–ª—å—Ç–µ—Ç –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏, –±–∞–∫–∞–ª–∞–≤—Ä/–Ω–µ–æ–∫–æ–Ω—á–µ–Ω–Ω–æ–µ –≤—ã—Å—à–µ–µ\")"
    )

async def validate_and_save_data(data: Dict) -> bool:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º"""
    if not data.get('subjects'):
        return False
    if contains_links(data.get('description', '')):
        return False
    if not data.get('photo'):
        return False
    return True


def get_years_form(experience: int) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ–æ—Ä–º—É —Å–ª–æ–≤–∞ '–≥–æ–¥' –¥–ª—è –ª—é–±–æ–≥–æ —á–∏—Å–ª–∞"""
    if experience % 100 in (11, 12, 13, 14):
        return "–ª–µ—Ç"

    last_digit = experience % 10
    if last_digit == 1:
        return "–≥–æ–¥"
    elif 2 <= last_digit <= 4:
        return "–≥–æ–¥–∞"
    else:
        return "–ª–µ—Ç"

def format_profile_text(data: dict) -> str:
    profile = [
        "‚úÖ –ê–Ω–∫–µ—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞!",
        f"üë§ –ò–º—è: {data.get('name', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}",
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {data.get('description', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}",
        f"‚è≥ –û–ø—ã—Ç: {data.get('experience', 0)} {get_years_form(data.get('experience', 0))}",
        f"üéì –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: {data.get('education', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}",
        "\nüìö –í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –∏ —Ä–∞–∑–¥–µ–ª—ã:"
    ]

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø—ã –∑–∞–¥–∞—á
    task_types_ids = data.get('task_types', [])
    if task_types_ids:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ID –≤ –Ω–∞–∑–≤–∞–Ω–∏—è
        task_types_names = [TYPE_OF_TASK.get(int(tt_id), '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø') for tt_id in task_types_ids]
        profile.append(f"üîß –¢–∏–ø—ã –∑–∞–¥–∞—á: {', '.join(task_types_names)}")

    profile.append("\nüìö –í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –∏ —Ä–∞–∑–¥–µ–ª—ã:")

    subject_details = data.get('subject_details', {})
    if not subject_details:
        profile.append("  –ü—Ä–µ–¥–º–µ—Ç—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã.")
    else:
        for subject_id_str, section_ids in subject_details.items():  # Assuming subject_id might be string from FSM data key
            try:
                subject_id = int(subject_id_str)  # Convert to int for lookup
            except ValueError:
                profile.append(f"  - –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø—Ä–µ–¥–º–µ—Ç–∞: {subject_id_str}")
                continue

            subject_name = SUBJECTS.get(subject_id, f"–ü—Ä–µ–¥–º–µ—Ç ID {subject_id}")

            section_names = []
            if not section_ids:  # No specific sections selected for this subject
                section_names.append("–≤—Å–µ —Ä–∞–∑–¥–µ–ª—ã")
            else:
                current_subject_sections_map = SUBJECT_SECTIONS.get(subject_id, {})
                for section_id_str in section_ids:  # Assuming section_id might be string
                    try:
                        section_id = int(section_id_str)  # Convert to int for lookup
                    except ValueError:
                        section_names.append(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ä–∞–∑–¥–µ–ª–∞: {section_id_str}")
                        continue
                    section_name = current_subject_sections_map.get(section_id, f"–†–∞–∑–¥–µ–ª ID {section_id}")
                    section_names.append(section_name)

            profile.append(f"  - {subject_name}: {', '.join(section_names)}")

    return "\n".join(profile)