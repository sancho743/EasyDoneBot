from typing import Dict, Union, List
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery

from service.KeyBoardService import get_subjects_keyboard, get_sections_keyboard, get_task_type_keyboard
from service.RegistrationService import contains_links
from service.DataBaseService import get_all_subjects, get_sections_for_subject, get_all_task_types
# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è FSM —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è ---

async def ask_for_subjects(target: Union[Message, CallbackQuery], state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–µ–¥–º–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –æ–Ω —Ö–æ—á–µ—Ç –≤—ã–±—Ä–∞—Ç—å."""
    message = target.message if isinstance(target, CallbackQuery) else target
    current_selected = (await state.get_data()).get("subjects", [])
    keyboard = await get_subjects_keyboard(current_selected)

    text = "üìö –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç(—ã), –ø–æ –∫–æ—Ç–æ—Ä—ã–º —Ä–µ—à–∞–µ—Ç–µ –∑–∞–¥–∞—á–∏:"
    try:
        if isinstance(target, CallbackQuery):
            await message.edit_text(text, reply_markup=keyboard)
        else:
            await message.answer(text, reply_markup=keyboard)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ ask_for_subjects: {e}")
        await message.answer(text, reply_markup=keyboard)


async def ask_for_sections(message: Message, subject_id: int):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ä–∞–∑–¥–µ–ª—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞."""
    # –í –∏–¥–µ–∞–ª–µ, –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã –∏–∑ –ë–î –ø–æ–ª—É—á–∏—Ç—å –∏ –∏–º—è –ø—Ä–µ–¥–º–µ—Ç–∞
    await message.answer(
        f"üìñ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª—ã –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞:",
        reply_markup=await get_sections_keyboard(subject_id)
    )


async def update_subjects_keyboard(callback: CallbackQuery, selected_ids: List[int]):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏."""
    await callback.message.edit_text(
        "üìö –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç(—ã), –ø–æ –∫–æ—Ç–æ—Ä—ã–º —Ä–µ—à–∞–µ—Ç–µ –∑–∞–¥–∞—á–∏:",
        reply_markup=await get_subjects_keyboard(selected_ids)
    )


async def update_sections_keyboard(callback: CallbackQuery, subject_id: int, selected_ids: List[int]):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–∞–∑–¥–µ–ª–∞–º–∏."""
    await callback.message.edit_text(
        f"üìñ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª—ã –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞:",
        reply_markup=await get_sections_keyboard(subject_id, selected_ids)
    )


async def update_task_type_keyboard(callback: CallbackQuery, selected_ids: List[int]):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–∏–ø–∞–º–∏ –∑–∞–∫–∞–∑–æ–≤."""
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø—ã –∑–∞–¥–∞—á:",
        reply_markup=await get_task_type_keyboard(selected_ids)
    )


async def ask_for_task_type(message: Message, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ç–∏–ø—ã –∑–∞–¥–∞—á."""
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø—ã –∑–∞–¥–∞—á, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –≤—ã–ø–æ–ª–Ω—è–µ—Ç–µ:",
        reply_markup=await get_task_type_keyboard()
    )


async def ask_for_description(message: Message, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""
    await message.answer(
        "‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–±–µ–∑ —Å—Å—ã–ª–æ–∫!):\n"
        "–ü—Ä–∏–º–µ—Ä: ¬´–†–µ—à–∞—é –∑–∞–¥–∞—á–∏ –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ 1-2 –∫—É—Ä—Å–æ–≤¬ª"
    )


async def ask_for_experience(message: Message, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã."""
    await message.answer("üìÜ –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã (–≤ –≥–æ–¥–∞—Ö –∏–ª–∏ ¬´–ù–µ—Ç –æ–ø—ã—Ç–∞¬ª):")


async def ask_for_photo(message: Message, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ñ–æ—Ç–æ."""
    await message.answer("üì∑ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –≤–∞—à–µ —Ñ–æ—Ç–æ (—ç—Ç–æ –ø–æ–≤—ã—Å–∏—Ç –¥–æ–≤–µ—Ä–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤):")


async def ask_for_education(message: Message, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏."""
    await message.answer(
        "üéì –£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ(–Ω–∞–ø—Ä–∏–º–µ—Ä: "
        "\"–ú–ì–£, —Ñ–∞–∫—É–ª—å—Ç–µ—Ç –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏, –±–∞–∫–∞–ª–∞–≤—Ä/–Ω–µ–æ–∫–æ–Ω—á–µ–Ω–Ω–æ–µ –≤—ã—Å—à–µ–µ\")"
    )


def get_years_form(experience: int) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ–æ—Ä–º—É —Å–ª–æ–≤–∞ '–≥–æ–¥' –¥–ª—è –ª—é–±–æ–≥–æ —á–∏—Å–ª–∞."""
    if experience % 100 in (11, 12, 13, 14): return "–ª–µ—Ç"
    last_digit = experience % 10
    if last_digit == 1: return "–≥–æ–¥"
    if 2 <= last_digit <= 4: return "–≥–æ–¥–∞"
    return "–ª–µ—Ç"


async def format_profile_text(data: dict) -> str:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è, –ø–æ–ª—É—á–∞—è –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î."""

    # 1. –ü–æ–ª—É—á–∞–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏ –∏–∑ –ë–î
    all_subjects_data = await get_all_subjects()
    subjects_map = {s['subject_id']: s['subject_name'] for s in all_subjects_data}

    all_task_types_data = await get_all_task_types()
    task_types_map = {t['task_type_id']: t['type_name'] for t in all_task_types_data}

    # 2. –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å
    profile_lines = ["‚úÖ –ê–Ω–∫–µ—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞!", f"üë§ –ò–º—è: {data.get('name', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}", "üìö –ü—Ä–µ–¥–º–µ—Ç—ã:"]

    # 3. –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –∏ —Ä–∞–∑–¥–µ–ª—ã
    subject_details = data.get('subject_details', {})
    if subject_details:
        for subject_id_str, section_ids in subject_details.items():
            subject_id = int(subject_id_str)
            subject_name = subjects_map.get(subject_id, f"ID {subject_id}")

            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–¥–µ–ª—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
            sections_data = await get_sections_for_subject(subject_id)
            sections_map = {s['section_id']: s['section_name'] for s in sections_data}
            section_names = [sections_map.get(s_id, f"ID {s_id}") for s_id in section_ids]

            profile_lines.append(f"  - {subject_name}: {', '.join(section_names) if section_names else '–≤—Å–µ —Ä–∞–∑–¥–µ–ª—ã'}")
    else:
        profile_lines.append("  - –ü—Ä–µ–¥–º–µ—Ç—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã")

    # 4. –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–∏–ø—ã –∑–∞–¥–∞—á
    task_type_ids = data.get('task_types', [])
    if task_type_ids:
        task_type_names = [task_types_map.get(t_id, f"ID {t_id}") for t_id in task_type_ids]
        profile_lines.append(f"üîß –¢–∏–ø—ã —Ä–µ—à–∞–µ–º—ã—Ö –∑–∞–¥–∞—á: {', '.join(task_type_names)}")

    # 5. –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    profile_lines.extend([
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {data.get('description', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}",
        f"üéì –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: {data.get('education', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}",
        f"‚è≥ –û–ø—ã—Ç: {data.get('experience', 0)} {get_years_form(data.get('experience', 0))}"
    ])
    return "\n".join(profile_lines)