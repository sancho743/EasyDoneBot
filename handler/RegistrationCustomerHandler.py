from pathlib import Path
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import CallbackQuery, Message, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove
from aiogram import Router, F

from service.RegistrationExecutorService import contains_links
from service.MenuService import get_customer_main_menu_keyboard
from service.DataBaseService import update_user_role, save_customer_profile
from utils.filters import RoleFilter

customer_router = Router()

class CustomerStates(StatesGroup):
    WAITING_CONSENT = State()
    WAITING_NAME = State()

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–≥–ª–∞—à–µ–Ω–∏—è
BASE_DIR = Path(__file__).parent.parent
PRIVACY_FILE = BASE_DIR / 'utils' / 'privacy_policy.txt'
PRIVACY_TEXT = PRIVACY_FILE.read_text(encoding='utf-8')


@customer_router.callback_query(F.data == "register_as_customer")
async def handle_customer_registration(callback: CallbackQuery, state: FSMContext):
    try:
        await state.set_data({"role": "customer"})  # –í–∞–∂–Ω–æ: role=customer
        await state.set_state(CustomerStates.WAITING_CONSENT)
        print(f"–í—ã–±—Ä–∞–Ω–∞ —Ä–æ–ª—å –∑–∞–∫–∞–∑—á–∏–∫–∞")
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω–∏–º–∞—é", callback_data="customer_accept")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data="customer_reject")]
        ])

        await callback.message.edit_text(  # –ò–∑–º–µ–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            f"–ü–µ—Ä–µ–¥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–Ω—è—Ç—å —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ:\n\n{PRIVACY_TEXT}",
            reply_markup=keyboard
        )
        await callback.answer()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–∫–∞–∑—á–∏–∫–∞: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@customer_router.callback_query(F.data.in_(["customer_accept", "customer_reject"]))
async def handle_privacy_response(callback: CallbackQuery, state: FSMContext):
    if callback.data == "customer_reject":
        await callback.message.answer("‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞ –±–µ–∑ –ø—Ä–∏–Ω—è—Ç–∏—è —Å–æ–≥–ª–∞—à–µ–Ω–∏—è")
        await state.clear()
        return

    await callback.message.delete()
    await state.set_state(CustomerStates.WAITING_NAME)
    await callback.message.answer(
        "üìõ –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç? (–≠—Ç–æ –∏–º—è –±—É–¥–µ—Ç –≤–∏–¥–Ω–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º)",
        reply_markup=ReplyKeyboardRemove()
    )
    await callback.answer()


@customer_router.message(CustomerStates.WAITING_NAME)
async def handle_name_input(message: Message, state: FSMContext):
    name = message.text.strip()

    if len(name) < 2:
        await message.answer("‚ùå –ò–º—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞")
        return

    if contains_links(name):
        await message.answer("‚ùå –ò–º—è –Ω–µ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å—Å—ã–ª–∫–∏ –∏–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã")
        return

    await state.update_data(name=name)
    await state.get_data()

    await message.answer(
        f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        f"üë§ –í–∞—à–µ –∏–º—è: {name}\n"
        f"üîπ –†–æ–ª—å: –ó–∞–∫–∞–∑—á–∏–∫",
        reply_markup=get_customer_main_menu_keyboard()
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await update_user_role(user_id=message.from_user.id, username=  message.from_user.username, role='customer')
    print(f"DEBUG: Saved role for user {message.from_user.id}. Current roles: customer")
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–∫–∞–∑—á–∏–∫–∞
    data = await state.get_data()
    await save_customer_profile(user_id=message.from_user.id, data=data)

    await state.clear()  # –í–∞–∂–Ω–æ –æ—á–∏—Å—Ç–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–µ–Ω—é –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π

@customer_router.message(F.text == "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", RoleFilter("customer"))
async def handle_profile_request(message: Message):
    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø–æ–∫–∞–∑–∞ –ø—Ä–æ—Ñ–∏–ª—è
    await message.answer("üìå –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:")

@customer_router.message(F.text == "–ú–æ–∏ –∑–∞–∫–∞–∑—ã", RoleFilter("customer"))
async def handle_orders_request(message: Message):
    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø–æ–∫–∞–∑–∞ –∑–∞–∫–∞–∑–æ–≤
    await message.answer("üì¶ –í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –∑–∞–∫–∞–∑—ã:")

@customer_router.message(F.text == "–ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", RoleFilter("customer"))
async def handle_support_request(message: Message):
    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É
    await message.answer("üõü –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:")